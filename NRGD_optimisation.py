# -*- coding: utf-8 -*-
"""Copy of Final NRGD Optimisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e-4GT_bhi023bBBYJy8WyPc1eAE-iRjP
"""

import numpy as np
from sympy import *
import math
import matplotlib.pyplot as plt

def FN1(x):
    return 3*x[0]-cos(x[1]*x[2])-0.5
def FN2(x):
    return x[0]**2-81*(x[1]+0.1)**2+sin(x[2])+1.06
def FN3(x):
    return exp(-x[0]*x[1])+20*x[2]+(((10*3.1412)-3)/3)

x = Symbol("x")
y = Symbol("y")
z = Symbol("z")
Init_Point = [0,0,0]
Xold = np.zeros((3,1))
Init_Symbols = [Symbol('x'),Symbol('y'),Symbol('z')]
G = 0
GD= 0
counter = 0
Mag_GV = 1
counterarr = np.zeros(5)
MagGVarr = np.zeros(5)
MagFXarr = np.zeros(5)

F = [FN1(Init_Point),FN2(Init_Point),FN3(Init_Point)]
FD = [FN1(Init_Symbols),FN2(Init_Symbols),FN3(Init_Symbols)]

for i in F:
    G = G + 0.5*i**2

for i in FD:
    GD = GD + 0.5*i**2

GDx = GD.diff(x)
GDy = GD.diff(y)
GDz = GD.diff(z)

Xold = np.zeros((3,1))

Hessian = hessian(GD, [x,y,z])

while(Mag_GV >= 0.00001):
    counterarr[counter] = counter
    Gradient_Vector= np.array([[GDx.subs([(x, Xold[0]), (y, Xold[1]), (z, Xold[2])])], [GDy.subs([(x, Xold[0]), (y, Xold[1]), (z, Xold[2])])], [GDz.subs([(x, Xold[0]), (y, Xold[1]), (z, Xold[2])])]])
    HessianSub = Hessian.subs([(x, Xold[0]), (y, Xold[1]), (z, Xold[2])])
    InvHessian = HessianSub.inv(method="LU")
    Xold = Xold - InvHessian*Gradient_Vector
    GVtype = Gradient_Vector.astype(np.float64)
    Mag_GV = np.linalg.norm(GVtype)
    MagGVarr[counter] = Mag_GV
    print("Number of Iterations: ", counter)
    print("Xnew = ", Xold)
    print("Magnitude of The Gradient Vector = ", Mag_GV)
    print("Stopping Condition is ", not Mag_GV >= 0.00001)
    counter+=1

out = np.linspace(1,6,5)
plt.plot(counterarr, MagGVarr)
plt.title('Magnitude of Gradient Vector Vs Index Number')
plt.ylabel('Gradient Vector Magnitude')
plt.xlabel('Iteration Number')
plt.show()