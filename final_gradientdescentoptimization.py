# -*- coding: utf-8 -*-
"""Final GradientDescentOptimization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T4d-CRYTkCAQWCFA4MRCQCdFyNbSEz-f
"""

import numpy as np
import matplotlib.pyplot as plt
from sympy import *
import math

res = [0,0,0,0]
x = Symbol("x")
y = Symbol("y")
z = Symbol("z")
t = Symbol("t")
F = []
EitaGradient = [0,0,0,0]
points = [[0,0,0,0]]
drv= [0,0,0,0]
G = 0
Condition = 1
it = 0


for i in range(0, 4):
    eqn = sympify(input("Enter Equation: ")) 
    F.append(eqn)

for i in F:
    G = simplify(G + i**2)
    
derivative = [G.diff(Symbol('x')), G.diff(Symbol('y')), G.diff(Symbol('z')), G.diff(Symbol('t'))]
print("The derivative of First introduced Fn  = " , derivative[0])
print("The derivative of Second introduced Fn  = " , derivative[1])
print("The derivative of Third introduced Fn  = " , derivative[2])
print("The derivative of Fourth introduced Fn  = " , derivative[3])
while(Condition >= 0.0001):
    print("The Iteration Number : " , it)
    print("The Present Point Reached: " , points[-1])
    for num in range(0, 4):
            eqn2 = derivative[num].subs([(x, points[it][0]), (y, points[it][1]), (z, points[it][2]), (t,points[it][3])])
            drv[num] = simplify(eqn2).evalf(5)
    for num2 in range(0,4):
            EitaGradient[num2] = 0.001*drv[num2]

    Condition = math.sqrt(drv[0]**2+drv[1]**2+drv[2]**2+drv[3]**2)

    for j in range(0,4):
        res[j] = points[it][j] - EitaGradient[j]
    points.append(res)
    it+=1

print("Magnitude of Gradient = " , Condition)
print("Is Condition Achieved?", not Condition >= 0.01)
print("The Last Points Achieved: " , points[-1])